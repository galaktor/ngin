<!--
ATTENTION: 
Since NAnt's <solution> task does not support Visual Studio 2008 project files
as of version 0.85, I am forced to directly address MSBuild.exe to build the solution.

This and the fact that there is no proper alternative to MSBuild.exe (yet) makes building
the project on a platform other than windows impossible. Hopefully Mono will get their
own implementation "xBuild" working properly, then it should be trivial to alter the
"build" target to use xBuild. Until then, this script is only runnable on windows.
-->

<project name="NGin.Core" default="rebuild">
	<property name="label" value="0.0.0.0" readonly="false" verbose="true" />
	<if test="${property::exists('CCNetLabel')}">
		<property name="label" value="${CCNetLabel}" readonly="false" verbose="true" />
		<echo message="using ccnet label: ${label}" />
	</if>	
	
    <property name="configuration" value="release" verbose="true" readonly="false"/>
	<property name="dependencyDir" value="../dependencies" verbose="true" readonly="false"/>
	<property name="outputDir" value="../output" verbose="true" readonly="false"/>
	<property name="srcDir" value="../src" verbose="true" readonly="false"/>
	<property name="buildDir" value="${outputDir}/bin/${configuration}" verbose="true" readonly="false"/>
	<property name="testsDir" value="${buildDir}/tests" verbose="true" readonly="false"/>
	<property name="docDir" value="${outputDir}/doc" verbose="true" readonly="false"/>
	<property name="distDir" value="../dist" verbose="true" readonly="false"/>	
	
	<!-- MSBuild config -->
	<property name="msbuildExecDir" value="C:/Windows/Microsoft.NET/Framework/v3.5" readonly="false" verbose="true"/>
	<!-- special logger for MSBulid to output XML files -->
	<property name="msbuildXmlLogger" value="${dependencyDir}/msbuildXmlLogger/Kobush.Build.dll" verbose="true" readonly="false"/>
	
	<!-- Gendarme config-->
	<property name="gendarmeExecDir" value="${environment::get-variable('programfiles')}/Novell/Gendarme" verbose="true" readonly="false"/>
	<property name="gendarmeRulesFile" value="${gendarmeExecDir}/rules.xml" verbose="true" readonly="false"/>
	<property name="gendarmeRulesetDef" value="*" verbose="true" readonly="false"/>
	
	<!-- NUnit config -->
	<property name="nunitExecDir" value="${environment::get-variable('programfiles')}/NUnit 2.5.2/bin/net-2.0" verbose="true" readonly="false"/>
	
	<!-- Report Output Directories -->
	<property name="artifactsDir" value="${buildDir}/artifacts" verbose="true" readonly="false"/>
	<property name="nunitResultsFile" value="ngin.results.nunit.xml" readonly="false" verbose="true"/>
	<property name="msbuildResultsFile" value="ngin.results.msbuild.xml" readonly="false" verbose="true"/>
	<!-- <property name="fxcopResultsFile" value="ngin.results.fxcop.xml" readonly="false"/> -->
	<property name="gendarmeResultsFile" value="ngin.results.gendarme.xml" verbose="true" readonly="false"/>
	
	<!-- load custom tasks -->
	<loadtasks path="${dependencyDir}/nanttasks" />
	
	<!-- //////////////////////////////////////////////////////////// -->
	<!-- ///////////////////// BEGIN TARGETS //////////////////////// -->
	<!-- //////////////////////////////////////////////////////////// -->
	
	<target name="reset" description="Cleans up the target output directory so no left-overs can cause problems at runtime.">
		<delete>
			<!-- erase any output files -->
            <fileset>
				<include name="${buildDir}/**" />
            </fileset>
        </delete>
	</target>
	
	<!-- TODO -->
	<target name="prebuild" description="Performs various tasks that are necessary before compiling." depends="setversion">
		<!-- recreate main output folders -->
		<mkdir dir="${artifactsDir}" />
		
		<property name="testDependenciesDir" value="${buildDir}/tests/dependencies" />
		<!-- create dependencies directory for test -->
		<mkdir dir="${testDependenciesDir}" />
		<!-- copy dependencies to test directory -->
		<copy todir="${testDependenciesDir}">
			<fileset basedir="${dependencyDir}">		
				<include name="**/*.*" />
				<exclude name="**/*.txt" />
			</fileset>
		</copy>
		<!-- copy dependencies into unit tests directory -->
		<copy todir="${buildDir}/tests/unit" flatten="true" >
			<fileset basedir="${dependencyDir}">		
				<include name="**/*.*" />
				<exclude name="**/*.txt" />
			</fileset>
		</copy>
	</target>
	
	<target name="build" description="Build the solution using the desired configuration.">
		<exec program="MSBuild.exe" basedir="${msbuildExecDir}" append="true" failonerror="true"
			  workingdir=".">
			<arg line="/t:rebuild" />
			<arg line="/p:Configuration=${configuration}"/>
			<arg file="../src/ngin.sln"/>	
			<arg line="/logger:Kobush.Build.Logging.XmlLogger,${msbuildXmlLogger};${artifactsDir}\${msbuildResultsFile}" />
		</exec>
        
		<property name="expected.output" value="${buildDir}/ngin.core.dll" />
        <fail unless="${file::exists(expected.output)}">Output file doesn't exist at: ${expected.output}</fail>
	</target>
	
	<target name="postbuild" description="Performs various tasks that are necessary after compiling. Breaks build on fail." depends="">
	</target>
	
	<target name="setversion" description="Sets the version number to current label.">
		<script language="C#">
			<references>
					<include name="System.dll" />
			</references>
			<imports>
					<import namespace="System.Text.RegularExpressions" />
			</imports>
			<code><![CDATA[
					 [TaskName("setversion-task")]
					 public class SetVersionTask : Task
					 {
					  protected override void ExecuteTask()
					  {
					   Console.WriteLine("Modifying file: {0}", Project.Properties["filename"]);
					   StreamReader reader = new StreamReader(Project.Properties["filename"]);
					   string contents = reader.ReadToEnd();
					   reader.Close();					   
					   // replace assembly version
					   string replacement = "[assembly: AssemblyVersion( \"" + Project.Properties["label"] + "\" )]";
					   contents = Regex.Replace(contents, @"\[assembly: AssemblyVersion\( "".*"" \)\]", replacement);
					   // replace assembly file version
					   replacement = "[assembly: AssemblyFileVersion( \"" + Project.Properties["label"] + "\" )]";
					   contents = Regex.Replace(contents, @"\[assembly: AssemblyFileVersion\( "".*"" \)\]", replacement);
					   replacement = "[assembly: AssemblyInformationalVersion( \"" + Project.Properties["label"] + "\" )]";
					   contents = Regex.Replace(contents, @"\[assembly: AssemblyInformationalVersion\( "".*"" \)\]", replacement);	
					   StreamWriter writer = new StreamWriter(Project.Properties["filename"], false);
					   writer.Write(contents);
					   writer.Close();
					  }
					 }
					 ]]>
			</code>
		</script>
		<foreach item="File" property="filename">
			<in>
					<items basedir="${srcDir}">
							<include name="**/AssemblyInfo.cs/**"></include>
					</items>
			</in>
			<do>
					<setversion-task />
			</do>
		</foreach>
	</target>

	
	<target name="dependencies" description="Copies required runtime dependencies to the projects output directory.">
	</target>
	
	<!-- BROKEN, NDoc throws unexplainable NullReferenceException -->
	<target name="documentation" description="Generates the documentation for the project.">		
		<!--
		<ndoc>
			<assemblies basedir="${buildDir}">			
				<include name="**/NGin*.dll" />
				<exclude name="**/tests/**" />
			</assemblies>
			<summaries basedir="${buildDir}">
				
			</summaries>
			<documenters>
				<documenter name="MSDN">
					<property name="OutputDirectory" value="${docDir}" />
					<property name="HtmlHelpName" value="NGin.Core" />
					<property name="HtmlHelpCompilerFilename" value="hhc.exe" />
					<property name="IncludeFavorites" value="False" />
					<property name="Title" value="NGin - A flexible, parallel game engine core for .NET/Mono." />
					<property name="SplitTOCs" value="False" />
					<property name="DefaulTOC" value="" />
					<property name="ShowVisualBasic" value="True" />
					<property name="ShowMissingSummaries" value="True" />
					<property name="ShowMissingRemarks" value="True" />
					<property name="ShowMissingParams" value="True" />
					<property name="ShowMissingReturns" value="True" />
					<property name="ShowMissingValues" value="True" />
					<property name="DocumentInternals" value="True" />
					<property name="DocumentProtected" value="True" />
					<property name="DocumentPrivates" value="True" />
					<property name="DocumentEmptyNamespaces" value="False" />
					<property name="IncludeAssemblyVersion" value="True" />
					<property name="CopyrightText" value="Copyright (c) 2009 Raphael B. Estrada. INSERT LICENSE HERE" />
					<property name="CopyrightHref" value="INSER LICENSE URL HERE" />
				 </documenter>
			</documenters>
			<referencepaths basedir="${dependencyDir}">
				<include name="**/${configuration}/**" />
			</referencepaths>
		</ndoc>
		-->
		<!-- clean up doc artifactss -->
		<delete>
			<!-- erase any leftover hhc files -->
            <fileset>
				<include name="${docDir}/*.hhc" />
				<include name="${docDir}/*.hhk" />
				<include name="${docDir}/*.hhp" />
            </fileset>			
        </delete>
		<delete dir="${docDir}/ndoc_msdn_temp" />
		<delete dir="${docDir}/ndoc_resources" />
		<delete dir="${docDir}/chm" />
		<delete dir="${docDir}/html" />
		<move todir="${docDir}/chm" overwrite="true">
			<fileset basedir="${docDir}">
				<include name="*.chm" />
			</fileset>
		</move>
		<move todir="${docDir}/html" overwrite="true">
			<fileset basedir="${docDir}">
				<include name="*.*" />
			</fileset>
		</move>
	</target>
	
	<target name="test" description="Runs the projects unit and integration tests." >
		<exec program="nunit-console.exe" basedir="${nunitExecDir}" append="true" failonerror="false"
			  workingdir=".">
			<arg line="/xml:${artifactsDir}/${nunitResultsFile}" />
			<arg line="${testsDir}/unit/NGin.Core.Test.dll"/>			
		</exec>
	</target>	
	
	<target name="analyze" description="Runs a static code analysis check.">
		<gendarme 	executable="${gendarmeExecDir}/gendarme.exe"
					outputType="XmlFile" outputFile="${artifactsDir}/${gendarmeResultsFile}">
		<assemblies>
			<include name="${buildDir}/**/ngin*.dll" />
			<exclude name="${buildDir}/**/tests/**" />
		</assemblies>
	</gendarme>

	</target>
	
	<!-- TODO -->
	<target name="cleanup" description="Cleans up any unused artifactss that were generated during the process.">
	</target>
    	
    <target name="rebuild" depends="reset, prebuild, build, postbuild, dependencies, cleanup">
	</target>
	
	<target name="predist" description="Prepares the zipping of a distibution by copying relevant files to the dist directory." depends="">	
	<!-- copy source -->
		<copy todir="${distDir}/src">
			<fileset basedir="${srcDir}">
				<include name="**/*" />
				<exclude name="**/*.suo" />
				<exclude name="**/*.cache" />
				<exclude name="**/bin/**" />
				<exclude name="**/obj/**" />
				<exclude name="**/*.snk" />
			</fileset>
		</copy>
		<!-- copy legal stuff -->
		<copy todir="${distDir}">
			<fileset basedir="../">
				<include name="README" /> 
				<include name="LICENSE" />
			</fileset>
		</copy>
		<!-- copy dependencies with placeholder text files -->
		<copy todir="${distDir}">
			<fileset basedir="../">
				<include name="dependencies/**/*.txt" />
			</fileset>
		</copy>
		<!-- copy recent build -->
		<copy todir="${distDir}/output">
			<fileset basedir="../output">
				<include name="bin/release/**" />
				<exclude name="**/artifacts/**" />
				<exclude name="**/tests/**" />
			</fileset>
		</copy>
		<!-- copy documentation -->
		<copy todir="${distDir}/output">
			<fileset basedir="../output">
				<include name="doc/**" />
			</fileset>
		</copy>
		<!-- copy build script -->
		<copy todir="${distDir}/scripts">
			<fileset basedir="../scripts">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>
	
	<target name="pack" description="Zips the relevant output files for a distribution.">
		<mkdir dir="${distDir}" />
		<property name="timestamp" value="" />
		<tstamp property="timestamp" pattern="yyyyMMdd_HHmm" verbose="true" />
		
		<if test="${CCNetRequestSource == 'nightlybuild'}">
			<property name="label" value="${label}_nightly" readonly="false" verbose="true" />
			<echo message="using nightly build label: ${label}" />
		</if>
		
		<zip zipfile="${distDir}/${label}_${timestamp}.zip" ziplevel="9">
			<fileset basedir="${distDir}">
				<include name="**/*" />
				<exclude name="**/*.zip" />
				<exclude name="**/*.tar.bz2" />
			</fileset>
		</zip>
		<tar destfile="${distDir}/${label}_${timestamp}.tar.bz2" compression="BZip2">
			<fileset basedir="${distDir}">
				<include name="**/*" />					
				<exclude name="**/*.zip" />
				<exclude name="**/*.tar.bz2" />
			</fileset>
		</tar>
	</target>
	
	<target name="cleandist" descriptioin="Cleans up after creating a distribution.">
		<delete>
			<fileset basedir="${distDir}">
				<include name="**/*" />
				<exclude name="**/*.zip" />
				<exclude name="**/*.tar.bz2" />
			</fileset>			
		</delete>
	</target>
    
	<target name="distribute" description="Does everything required to distribute the project, resulting in a zip file containing it all." depends="rebuild, documentation, predist, pack, cleandist">
	</target>
</project>